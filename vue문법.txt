1. 머스태치, v-text, v-html
<h1>{{ name }}</h1>
<h1 v-text="name"></h1>
<div v-text="`${name} 안녕`"></div>

<template>
  <div>
    <h1>{{ name }}</h1>
    <h1 v-text="name"></h1>
    <div v-text="`${name} 안녕`"></div>
    <p v-html="button"></p>
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      name : "haha",
      button : "<button>버튼</button>"
    }
  }
}


2. v-bind
<template>
  <div>
    <h1 v-bind:id="haha">hello</h1>
    <a v-bind:href="url">naver 바로가기</a>
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      haha : "blue",
      url : "http://naver.com"
    }
  }
}
</script>

<style>
  #blue {
    color: blue;
  }
</style>

3. 삼항연산자 사용
<template>
  <div>
    <h1 :class="isDone === false ? 'blue' : ''">안녕</h1>
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      isDone : false,

    }
  }
}
</script>

<style>
 .blue { color : blue}
</style>

4. v-once
<template>
  <div>
    <h1>name : {{ user.name }}</h1>
    <h1 v-once v-text="user.name"></h1> // 처음렌더링되면 model같은걸로 수정해도 바뀌지않음 값이
    <input type="text" v-model="user.name">
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      user : {
        name :'kim',
        age : 23,
        job : "shehdwk"
      }
    }
  }
}
</script>

<style>
</style>

5. v-if, v-else., v-show
<template>
  <div>
    <div v-if="bolean">안녕하세요</div>
    <div v-else>안녕하가세요</div>

    <div v-show="bolean">안녕하다</div> // 얘는 v-if랑 비슷한데 v-if는 아예 출력이안되지만 얘는 html코드에 남으며 dn처리만 되어있음
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      bolean : false,
      user : {
        name :'kim',
        age : 23,
        job : "shehdwk"
      }
    }
  }
}
</script>

<style>
</style>

6. v-for
<template>
  <div>
    <!-- of랑 in이랑 차이점 잘 몰?루 -->
    <ul>
      <li v-for="(x,i) of fruits" :key="i">{{ x }}{{ i }}</li>
    </ul>
    <div v-for="(value,key,i) in user" :key="i">{{ value }} {{ key }} {{ i }}</div>
    <div v-for="(x,i) in people" :key="i">
      {{ x.name }},{{ x.age }},{{ i }}
    </div>
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      fruits : ["banana","apple","melon"],
      user : {
        name : "kim",
        age : 23
      },
      people : [
        {name : "kim",age:23},
        {name : "lee",age:42},
        {name : "sang",age:29}
      ]
    }
  }
}
</script>

7. v-if + v-for
<template>
  <div>
    <ul>
      <template v-for="(x,i) in people"> // 빈공간에 식을쓰고싶어 template을사용
          <li v-if="x.age == 20" :key="i">{{ x.name }}{{ i }}</li>
      </template>
    </ul>
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      people : [
        {name : "kim", age:20},
        {name : "lee", age:10},
        {name : "sang", age:30},
        {name : "park", age:20},
        {name : "kim", age:10},
        {name : "kang", age:40}
      ]
    }
  }
}
</script>


8. methods 사용해서 함수사용
<template>
  <div>
    <div>{{ add(0) }}</div>
    <div>{{ add(1) }}</div>
    <div>{{ addadd(50) }}</div>
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      age : 30
    }
  },
  methods:{
    add(num=0){ // 파라미터값의 기본값을 지정! 파라미터2개일때 nan안뜨게가능,파라미터2개여도 하나만적어도 기본값으로계산해줌
      // this를 써야 vue가 가진 데이터에 접근가능!
      return this.age + num;
    },
    addadd(num){
      return this.add(num)
    }
  }
}
</script>

9. v-on:click="메소드"
<template>
  <div>
    <h1>{{ jam }}</h1>
    <button v-on:click="chgJam">눌러!</button>
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      jam : "vuejs재미없어!"
    }
  },
  methods:{
    chgJam(){
      this.jam = "vuejs짱잼!"
    }
  }
}
</script>

10. v-model, input관련, 한글텍스트 한틱씩 밀리는거 수정
<template>
  <div>
    {{ user }}
    <form>
      <div>
        <label for="name">이름</label>
        <input type="text" id="name" v-model="user.name" @input="setValue">
      </div>
      <div>
        <label for="age">나이</label>
        <input type="text" id="age" v-model="user.age">
      </div>
      <div>
        <label for="city">사는곳</label>
        <select id="city" v-model="user.city">
          <option value="seoul">서울</option>
          <option value="daegu">대구</option>
          <option value="busan">부산</option>
        </select>
      </div>
      <div>

      </div>
    </form>
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      user:{
        name :'',
        age : 0
      }
    }
  },
  methods:{
    // 한글로치면 한틱씩 밀리는걸 방지하는 함수
    setValue(e){
      this.user.name = e.target.value
    }
  }
}
</script>

11. Directives
나만의 커스텀 v-on 같은거 만들수있는거 
잘모르겠음

12. coumputed - 연산프로퍼티
쓰는이유 - 템플릿안에서쓰면 보기어려움, 메소드처럼 재사용가능, 
methods와 기능이 비슷하나 methods가 렌더링마다 실행이 되는거라면 
computed는 값이 바뀌지않는한 재실행되지않음 -> 속도가빠름
<template>
  <div>
      <div>
      // v-pre = 머스태치 안되게 하는거!
        <h2 v-pre>{{  username }}</h2>
        <h2>{{ totalScroe }}</h2>
      </div>
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      grade : {
        math : 30,
        sci : 70,
        eng : 10,
        kor : 100
      }
    }
  },
  // methods와의 차이점 값같은게 변해도 재호출되지않는다고함
  computed:{
    totalScroe(){
      // 앞에꺼 떼게해주는거
    
      const { math, kor, eng, sci} = this.grade;
      // 원래라면
      // return this.grade.math + this.grade.kor + this.grade.eng + this.grade.sci
      return math + kor + eng + sci; 
    }
  },
  directives:{
  },
  methods:{
  }
}
</script>

13.watch
<template>
  <div>
      <div>
        <h1>Watchers</h1>
        <div>{{ money }}</div>
        <button @click="money = money + 100">+100</button>
        <button @click="money = money - 100">-100</button>
      </div>
      <h3>{{ receit }}</h3>
      <button @click="receit.food+=500">receit 조작</button>
      <hr>
      <input type="text" v-model="name">
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      name : "kim",
      money : 0,
      receit : {
        food : 3000,
        fee : 200,
        fare : 10000
      }
    }
  },
  // data에서 값이 바뀔때마다 체크를해줌(바뀐값, 바뀌기전값)
  watch:{
    money(newValue, oldValue){
      console.log(newValue,oldValue)
    },
    // 객체데이터면 이렇게 해야한다고함
    receit : {
      handler(newvalue){
        console.log(newvalue)
      },
      // 객체일때 바뀌는걸 확인할수있게해줌
      deep : true
    },
    name : {
      handler(newvalue){
        console.log(newvalue);
      },
      // 바뀌어야만 체크를해주는데 이거하면 첫값도 체크해줌
      immediate : true
    }
  },
  computed:{
  },
  directives:{
    
  },
  methods:{
  }
}
</script>

14. component - props,$emit
App.vue
<template>
  <div>
    <button @click="popup = true">popup</button>
    <DetailView v-if="popup == true" @popupClose="popupClose" @sendData="showData"/>
  </div>
</template>

<script>
import DetailView from './components/DetailView.vue';
export default {
    name: "App",
    data() {
        return {
          popup : false,
        };
    },
    watch: {},
    computed: {},
    directives: {},
    methods: {
      popupClose(){
        this.popup = false
      },
      showData(data){
        console.log(data,'전송완료')
      }
    },
    components: {  
      DetailView
    }
};
</script>

DetailView
<template>
  <div class="wrapper">
    <div class="container">
      <h2>Detail Page</h2>
      <button @click="popupClose">close</button>
      <input type="text" v-model="username">
      <button @click="sendData">send</button>
    </div>
  </div>
</template>

<script>
export default {
  name : "detailView",
  data(){
    return{
      username : ""
    }
  },
  methods : {
    popupClose(){
      this.$emit("popupClose")
    },
    sendData(){
      this.$emit("sendData", this.username)
    }
  }

}
</script>


15. component - provide , inject 컴포넌트안에 컴포넌트 안에 컴포넌트 인애한테 한번에 프롭스주기

<template>
  <div>
    <CompLevel1 />
  </div>
</template>

<script>
import CompLevel1 from './components/provide-inject/CompLevel1.vue';
export default {
    name: "App",
    data() {
        return {
          username : 'kim'
        };
    },
    provide(){
      return{
        name : this.username,
      }
    },
    watch: {},
    computed: {},
    directives: {},
    methods: {
    },
    components: { 
      CompLevel1
    }
};
</script>

<template>
  <div>
  <h2>component 3</h2>
  <h3>데이터전송 {{ name }}</h3>
  </div>
</template>

<script>
export default {
  name : "compThree",
  inject : ["name"] // 왜인지는 모르나 대괄호 중요
}
</script>

<style>

</style>

16. component - 다이나믹컴포넌트 - 상황에따라 다른 컴포넌트 보이기 v-if안쓰고
<template>
  <div>
    <button @click="activeTab = 'Menu1'"></button>
    <button @click="activeTab = 'Menu2'"></button>
    <button @click="activeTab = 'Menu3'"></button>
    <keep-alive> // 인풋같은거에 있는거 데이터 유지
    <component :is="activeTab"></component> // 다이나믹컴포넌트
    </keep-alive>
  </div>
</template>

<script>
import Menu1 from './components/provide-inject/Menu1.vue';
import Menu2 from './components/provide-inject/Menu2.vue';
import Menu3 from './components/provide-inject/Menu3.vue';
export default {
    name: "App",
    data() {
        return {
          activeTab : "Menu1"
        };
    },
    provide(){
      return{
        name : this.username,
      }
    },
    watch: {},
    computed: {},
    directives: {},
    methods: {
    },
    components: { 
      Menu1, Menu2, Menu3
    }
};
</script>

17. component slot - slot에 따른 다양한사용방법이 있다. 약간 테두리같은거만 꾸며두고 내용물은 내가채우는느낌으로
App.vue
<template> 
  <div>
    <CardView>
      <template v-slot:header>
        <h2>ㅎㅇ</h2>
      </template>
      <template v-slot:body>
        <div>안녕</div>
      </template>
      <template v-slot:footer>
        <span>ㅎㅎ</span>
      </template>
    </CardView>
  </div>
</template>

<script>
import CardView from "./components/slot/CardView.vue"
export default {
    name: "App",
    data() {
        return {
        };
    },
    provide(){
      return{
      }
    },
    watch: {},
    computed: {},
    directives: {},
    methods: {
    },
    components: { 
      CardView
    }
};
</script>

CardView.vue
<template>
  <div class="card">
    <div class="card-header"><slot name="header"></slot></div>
    <div class="card-body"><slot name="body"></slot></div>
    <div class="card-footer"><slot name="footer"></slot></div>
  </div>
</template>

<script>
export default {

}
</script>

<style>
  .card{
    box-shadow: 2px 2px 5px gray;
    width: 200px;
  }
</style>

18. teleport - #App 에 국한되지 않고 다른곳으로 이동가능 ex index.html에서 다른 클래스명 만들어서 사용가능 하다는 소리
<teleport to="# or . 아이디 or 클래스명"></teleport>

19. http request - axios api요청, 전송 then catch

<template>
  <div>
  <h2>HP</h2>
  <button @click="request">request</button>
  <ul>
    <li v-for="(x,i) in requestList" :key="i">{{ x.title }}</li>
  </ul>

  <div>
    <label>할일</label>
    <input type="text" v-model="todoItem.title">
    <button @click="createTodo">전송</button>
  </div>

  <p v-if="errorMessage">{{ errorMessage }}</p>
  </div>
</template>

<script>
import axios from 'axios'
export default {
  name : "HTTP",
  data() {
    return {
      requestList : [],
      errorMessage :"",
      todoItem : {
        title : "",
        completed : false
      },

    }
  },
  methods : {
    request(){
      const url = "https://jsonplaceholder.typicode.com/todos"
      axios.get(url)
      .then((res) => this.requestList = res.data)
      .catch((e) => {
        console.log(e)
        this.errorMessage = "에러"
      })
    },
    createTodo(){
      const url = "https://jsonplaceholder.typicode.com/todos"
      axios.post(url,this.todoItem)
      .then((res)=>console.log(res))
      .catch((e)=>console.log(e))
    }
  }
}
</script>