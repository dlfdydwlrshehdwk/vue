1. 머스태치, v-text, v-html
<h1>{{ name }}</h1>
<h1 v-text="name"></h1>
<div v-text="`${name} 안녕`"></div>

<template>
  <div>
    <h1>{{ name }}</h1>
    <h1 v-text="name"></h1>
    <div v-text="`${name} 안녕`"></div>
    <p v-html="button"></p>
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      name : "haha",
      button : "<button>버튼</button>"
    }
  }
}


2. v-bind
<template>
  <div>
    <h1 v-bind:id="haha">hello</h1>
    <a v-bind:href="url">naver 바로가기</a>
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      haha : "blue",
      url : "http://naver.com"
    }
  }
}
</script>

<style>
  #blue {
    color: blue;
  }
</style>

3. 삼항연산자 사용
<template>
  <div>
    <h1 :class="isDone === false ? 'blue' : ''">안녕</h1>
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      isDone : false,

    }
  }
}
</script>

<style>
 .blue { color : blue}
</style>

4. v-once
<template>
  <div>
    <h1>name : {{ user.name }}</h1>
    <h1 v-once v-text="user.name"></h1> // 처음렌더링되면 model같은걸로 수정해도 바뀌지않음 값이
    <input type="text" v-model="user.name">
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      user : {
        name :'kim',
        age : 23,
        job : "shehdwk"
      }
    }
  }
}
</script>

<style>
</style>

5. v-if, v-else., v-show
<template>
  <div>
    <div v-if="bolean">안녕하세요</div>
    <div v-else>안녕하가세요</div>

    <div v-show="bolean">안녕하다</div> // 얘는 v-if랑 비슷한데 v-if는 아예 출력이안되지만 얘는 html코드에 남으며 dn처리만 되어있음
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      bolean : false,
      user : {
        name :'kim',
        age : 23,
        job : "shehdwk"
      }
    }
  }
}
</script>

<style>
</style>

6. v-for
<template>
  <div>
    <!-- of랑 in이랑 차이점 잘 몰?루 -->
    <ul>
      <li v-for="(x,i) of fruits" :key="i">{{ x }}{{ i }}</li>
    </ul>
    <div v-for="(value,key,i) in user" :key="i">{{ value }} {{ key }} {{ i }}</div>
    <div v-for="(x,i) in people" :key="i">
      {{ x.name }},{{ x.age }},{{ i }}
    </div>
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      fruits : ["banana","apple","melon"],
      user : {
        name : "kim",
        age : 23
      },
      people : [
        {name : "kim",age:23},
        {name : "lee",age:42},
        {name : "sang",age:29}
      ]
    }
  }
}
</script>

7. v-if + v-for
<template>
  <div>
    <ul>
      <template v-for="(x,i) in people"> // 빈공간에 식을쓰고싶어 template을사용
          <li v-if="x.age == 20" :key="i">{{ x.name }}{{ i }}</li>
      </template>
    </ul>
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      people : [
        {name : "kim", age:20},
        {name : "lee", age:10},
        {name : "sang", age:30},
        {name : "park", age:20},
        {name : "kim", age:10},
        {name : "kang", age:40}
      ]
    }
  }
}
</script>


8. methods 사용해서 함수사용
<template>
  <div>
    <div>{{ add(0) }}</div>
    <div>{{ add(1) }}</div>
    <div>{{ addadd(50) }}</div>
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      age : 30
    }
  },
  methods:{
    add(num=0){ // 파라미터값의 기본값을 지정! 파라미터2개일때 nan안뜨게가능,파라미터2개여도 하나만적어도 기본값으로계산해줌
      // this를 써야 vue가 가진 데이터에 접근가능!
      return this.age + num;
    },
    addadd(num){
      return this.add(num)
    }
  }
}
</script>

9. v-on:click="메소드"
<template>
  <div>
    <h1>{{ jam }}</h1>
    <button v-on:click="chgJam">눌러!</button>
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      jam : "vuejs재미없어!"
    }
  },
  methods:{
    chgJam(){
      this.jam = "vuejs짱잼!"
    }
  }
}
</script>

10. v-model, input관련, 한글텍스트 한틱씩 밀리는거 수정
<template>
  <div>
    {{ user }}
    <form>
      <div>
        <label for="name">이름</label>
        <input type="text" id="name" v-model="user.name" @input="setValue">
      </div>
      <div>
        <label for="age">나이</label>
        <input type="text" id="age" v-model="user.age">
      </div>
      <div>
        <label for="city">사는곳</label>
        <select id="city" v-model="user.city">
          <option value="seoul">서울</option>
          <option value="daegu">대구</option>
          <option value="busan">부산</option>
        </select>
      </div>
      <div>

      </div>
    </form>
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      user:{
        name :'',
        age : 0
      }
    }
  },
  methods:{
    // 한글로치면 한틱씩 밀리는걸 방지하는 함수
    setValue(e){
      this.user.name = e.target.value
    }
  }
}
</script>

11. Directives
나만의 커스텀 v-on 같은거 만들수있는거 
잘모르겠음씨의팔

12. coumputed
<template>
  <div>
      <div>
      // v-pre = 머스태치 안되게 하는거!
        <h2 v-pre>{{  username }}</h2>
        <h2>{{ totalScroe }}</h2>
      </div>
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      grade : {
        math : 30,
        sci : 70,
        eng : 10,
        kor : 100
      }
    }
  },
  // methods와의 차이점 값같은게 변해도 재호출되지않는다고함
  computed:{
    totalScroe(){
      // 앞에꺼 떼게해주는거
    
      const { math, kor, eng, sci} = this.grade;
      // 원래라면
      // return this.grade.math + this.grade.kor + this.grade.eng + this.grade.sci
      return math + kor + eng + sci; 
    }
  },
  directives:{
  },
  methods:{
  }
}
</script>

13.watch
<template>
  <div>
      <div>
        <h1>Watchers</h1>
        <div>{{ money }}</div>
        <button @click="money = money + 100">+100</button>
        <button @click="money = money - 100">-100</button>
      </div>
      <h3>{{ receit }}</h3>
      <button @click="receit.food+=500">receit 조작</button>
      <hr>
      <input type="text" v-model="name">
  </div>
</template>

<script>
export default {
  name: 'App',
  data(){
    return{
      name : "kim",
      money : 0,
      receit : {
        food : 3000,
        fee : 200,
        fare : 10000
      }
    }
  },
  // data에서 값이 바뀔때마다 체크를해줌(바뀐값, 바뀌기전값)
  watch:{
    money(newValue, oldValue){
      console.log(newValue,oldValue)
    },
    // 객체데이터면 이렇게 해야한다고함
    receit : {
      handler(newvalue){
        console.log(newvalue)
      },
      // 객체일때 바뀌는걸 확인할수있게해줌
      deep : true
    },
    name : {
      handler(newvalue){
        console.log(newvalue);
      },
      // 바뀌어야만 체크를해주는데 이거하면 첫값도 체크해줌
      immediate : true
    }
  },
  computed:{
  },
  directives:{
    
  },
  methods:{
  }
}
</script>